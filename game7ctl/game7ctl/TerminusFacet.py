# Code generated by moonworm : https://github.com/bugout-dev/moonworm
# Moonworm version : 0.6.2

import argparse
import json
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from brownie import Contract, network, project
from brownie.network.contract import (
    ContractContainer,
    ContractConstructor,
    TransactionReceiptType,
    ContractNotFound,
    _ContractBase,
)
from eth_typing.evm import ChecksumAddress

CONTRACT_BUILD = {
    "bytecode": "60806040523480156200001157600080fd5b506000620000296200004060201b62001ad91760201c565b80546001600160a01b031916331790555062000064565b7f5b75cffee14646b6a66e69def89545550d8d264a0f3260af2fdc807d91004caf90565b613ac480620000746000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c8063731133e911610130578063a44cfc82116100b8578063e8a3d4851161007c578063e8a3d485146104b6578063e985e9c5146104be578063f242432a146104d1578063f3dc0a85146104e4578063f5298aca146104f757600080fd5b8063a44cfc8214610462578063ab3c7e5214610475578063b507ef521461047d578063d0c402e514610490578063dc55d0b2146104a357600080fd5b8063862440e2116100ff578063862440e21461040e5780638925d0131461042157806392eefe9b14610429578063938e3d7b1461043c578063a22cb4651461044f57600080fd5b8063731133e9146103c257806378cf2e84146103d557806384fa03a1146103e857806385bc82e2146103fb57600080fd5b80632eb2c2d6116101b35780633c50a3c5116101825780633c50a3c5146103565780634e1273f4146103695780635dc8bdf81461038957806369453ce91461039c5780636a326ab1146103af57600080fd5b80632eb2c2d6146103085780633013ce291461031b578063366e59e31461033b5780633bad2d821461034357600080fd5b80630e89341c116101fa5780630e89341c1461029c5780631f7fdffa146102bc5780631fbeae86146102cf57806321adca96146102e25780632365c859146102f557600080fd5b8062fdd58e1461022b57806301ffc9a714610251578063027b3fc2146102745780630e7afec514610287575b600080fd5b61023e610239366004612d29565b61050a565b6040519081526020015b60405180910390f35b61026461025f366004612d69565b6105c5565b6040519015158152602001610248565b610264610282366004612d86565b610615565b61029a610295366004612d29565b610628565b005b6102af6102aa366004612db2565b610745565b6040516102489190612e11565b61029a6102ca366004612f6d565b6107f1565b61029a6102dd366004612d86565b6108b3565b61029a6102f0366004613072565b6108cb565b61029a6103033660046130ec565b610c79565b61029a61031636600461311c565b610caf565b610323610d5f565b6040516001600160a01b039091168152602001610248565b610323610d7b565b61023e6103513660046131c5565b610d94565b610264610364366004612db2565b61101b565b61037c610377366004613207565b61103c565b60405161024891906132a5565b61023e610397366004612db2565b611179565b6102646103aa366004612db2565b611197565b61029a6103bd3660046132b8565b6111b9565b61029a6103d03660046132d3565b6111f0565b61029a6103e3366004612db2565b611278565b61023e6103f6366004613327565b611294565b61029a610409366004612d86565b611537565b61029a61041c36600461337a565b61154b565b61023e61157c565b61029a6104373660046132b8565b61158f565b61029a61044a3660046133b6565b6115a3565b61029a61045d3660046133ea565b6115ca565b61023e610470366004612db2565b6115d5565b61023e6115f3565b61023e61048b366004612db2565b611606565b61032361049e366004612db2565b61184c565b61029a6104b1366004612d86565b611873565b6102af611887565b6102646104cc366004613416565b611922565b61029a6104df366004613440565b61195f565b61029a6104f23660046130ec565b611a0a565b61029a6105053660046134a4565b611a3f565b60006001600160a01b03831661058d5760405162461bcd60e51b815260206004820152603e60248201527f45524331313535576974685465726d696e757353746f726167653a2062616c6160448201527f6e636520717565727920666f7220746865207a65726f2061646472657373000060648201526084015b60405180910390fd5b610595611ad9565b6000838152600891909101602090815260408083206001600160a01b038716845290915290205490505b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806105f657506001600160e01b031982166303a24d0760e21b145b806105bf57506301ffc9a760e01b6001600160e01b03198316146105bf565b60006106218383611afd565b9392505050565b610630611b7a565b336001600160a01b038316146106be5760405162461bcd60e51b815260206004820152604760248201527f5465726d696e757346616365743a2077697468647261775061796d656e74732060448201527f2d2d20436f6e74726f6c6c65722063616e206f6e6c79207769746864726177206064820152663a379039b2b63360c91b608482015260a401610584565b60006106c8611be0565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509082169063a9059cbb906044016020604051808303816000875af115801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f91906134d7565b50505050565b606061074f611ad9565b600083815260059190910160205260409020805461076c906134f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610798906134f4565b80156107e55780601f106107ba576101008083540402835291602001916107e5565b820191906000526020600020905b8154815290600101906020018083116107c857829003601f168201915b50505050509050919050565b60005b83518110156108a6576108208482815181106108125761081261352e565b602002602001015133610615565b610894576040805162461bcd60e51b81526020600482015260248101919091527f5465726d696e757346616365743a206d696e744261746368202d2d2063616c6c60448201527f6572206973206e656974686572206f776e6572206e6f7220617070726f7665646064820152608401610584565b8061089e8161355a565b9150506107f4565b5061073f84848484611c62565b6108bd8233611f33565b6108c78282611fb7565b5050565b80518251146109535760405162461bcd60e51b815260206004820152604860248201527f5465726d696e757346616365743a205f706f6f6c4d696e744261746368202d2d60448201527f20746f41646472657373657320616e6420616d6f756e7473206c656e677468206064820152670dad2e6dac2e8c6d60c31b608482015260a401610584565b3361095e8482610615565b6109de5760405162461bcd60e51b8152602060048201526044602482018190527f5465726d696e757346616365743a20706f6f6c4d696e744261746368202d2d20908201527f63616c6c6572206973206e656974686572206f776e6572206e6f7220617070726064820152631bdd995960e21b608482015260a401610584565b60006109e8611ad9565b90506000805b8551821015610b52576000868381518110610a0b57610a0b61352e565b602002602001015190506000868481518110610a2957610a2961352e565b6020026020010151905060006001600160a01b0316826001600160a01b031603610abb5760405162461bcd60e51b815260206004820152603c60248201527f5465726d696e757346616365743a205f706f6f6c4d696e744261746368202d2d60448201527f2063616e6e6f74206d696e7420746f207a65726f2061646472657373000000006064820152608401610584565b610ac58184613573565b60008a815260088701602090815260408083206001600160a01b0387168452909152812080549295508392909190610afe908490613573565b9091555050604080518a8152602081018390526001600160a01b0380851692600092918a1691600080516020613a6f833981519152910160405180910390a450508180610b4a9061355a565b9250506109ee565b60008781526006840160209081526040808320546007870190925290912054610b7c908390613573565b1115610c025760405162461bcd60e51b815260206004820152604960248201527f5465726d696e757346616365743a205f706f6f6c4d696e744261746368202d2d60448201527f204d696e74656420746f6b656e7320776f756c642065786365656420706f6f6c60648201526820636170616369747960b81b608482015260a401610584565b600087815260078401602052604081208054839290610c22908490613573565b92505081905550836001600160a01b0316877fba62777935b5e992de16a785941daef9f13517ff268a40563288072025b5023860008989604051610c6893929190613586565b60405180910390a350505050505050565b610c838233611f33565b6000610c8d611ad9565b6000938452600a01602052506040909120805460ff1916911515919091179055565b6001600160a01b038516331480610ccb5750610ccb8533611922565b610d4b5760405162461bcd60e51b815260206004820152604560248201527f45524331313535576974685465726d696e757353746f726167653a207472616e60448201527f736665722063616c6c6572206973206e6f74206f776e6572206e6f72206170706064820152641c9bdd995960da1b608482015260a401610584565b610d588585858585611ff0565b5050505050565b6000610d69611ad9565b600201546001600160a01b0316919050565b6000610d85611ad9565b546001600160a01b0316919050565b6000610d9e611b7a565b6000610da8611ad9565b60038101549091508015610fc1576000610dc0611be0565b9050816001600160a01b03821663dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4191906135f5565b1015610ec45760405162461bcd60e51b815260206004820152604660248201527f5465726d696e757346616365743a20637265617465506f6f6c5631202d2d204960448201527f6e73756666696369656e7420616c6c6f77616e6365206f6e207061796d656e74606482015265103a37b5b2b760d11b608482015260a401610584565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b91906134d7565b610fbf5760405162461bcd60e51b815260206004820152604960248201527f5465726d696e757346616365743a20637265617465506f6f6c5631202d2d205460448201527f72616e73666572206f66207061796d656e7420746f6b656e2077617320756e736064820152681d58d8d95cdcd99d5b60ba1b608482015260a401610584565b505b6000610fcc87612286565b905085610fef5760008181526009840160205260409020805460ff191660011790555b8415611011576000818152600a840160205260409020805460ff191660011790555b9695505050505050565b6000611025611ad9565b6000928352600a0160205250604090205460ff1690565b606081518351146110b55760405162461bcd60e51b815260206004820152603c60248201527f45524331313535576974685465726d696e757353746f726167653a206163636f60448201527f756e747320616e6420696473206c656e677468206d69736d61746368000000006064820152608401610584565b600083516001600160401b038111156110d0576110d0612e24565b6040519080825280602002602001820160405280156110f9578160200160208202803683370190505b50905060005b84518110156111715761114485828151811061111d5761111d61352e565b60200260200101518583815181106111375761113761352e565b602002602001015161050a565b8282815181106111565761115661352e565b602090810291909101015261116a8161355a565b90506110ff565b509392505050565b6000611183611ad9565b600092835260060160205250604090205490565b60006111a1611ad9565b600092835260090160205250604090205460ff161590565b6111c1611b7a565b60006111cb611ad9565b60020180546001600160a01b0319166001600160a01b03939093169290921790915550565b6111fa8333610615565b61126c5760405162461bcd60e51b815260206004820152603b60248201527f5465726d696e757346616365743a206d696e74202d2d2063616c6c657220697360448201527f206e656974686572206f776e6572206e6f7220617070726f76656400000000006064820152608401610584565b61073f848484846122e2565b611280611b7a565b600061128a611ad9565b6003019190915550565b600061129e611b7a565b60006112a8611ad9565b600381015490915080156114c15760006112c0611be0565b9050816001600160a01b03821663dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134191906135f5565b10156113c45760405162461bcd60e51b815260206004820152604660248201527f5465726d696e757346616365743a20637265617465506f6f6c5632202d2d204960448201527f6e73756666696369656e7420616c6c6f77616e6365206f6e207061796d656e74606482015265103a37b5b2b760d11b608482015260a401610584565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038216906323b872dd906064016020604051808303816000875af1158015611417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143b91906134d7565b6114bf5760405162461bcd60e51b815260206004820152604960248201527f5465726d696e757346616365743a20637265617465506f6f6c5632202d2d205460448201527f72616e73666572206f66207061796d656e7420746f6b656e2077617320756e736064820152681d58d8d95cdcd99d5b60ba1b608482015260a401610584565b505b60006114cc88612286565b9050866114ef5760008181526009840160205260409020805460ff191660011790555b8515611511576000818152600a840160205260409020805460ff191660011790555b6000818152600584016020526040902061152b8682613654565b50979650505050505050565b6115418233611f33565b6108c7828261248b565b6115558233611f33565b600061155f611ad9565b6000848152600582016020526040902090915061073f8382613654565b6000611586611ad9565b60030154905090565b611597611b7a565b6115a0816124c7565b50565b6115ab611b7a565b60006115b5611ad9565b9050600d81016115c58382613654565b505050565b6108c7338383612523565b60006115df611ad9565b600092835260070160205250604090205490565b60006115fd611ad9565b60010154905090565b6000611610611b7a565b600061161a611ad9565b6003810154909150801561183b576000611632611be0565b9050816001600160a01b03821663dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa15801561168f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b391906135f5565b101561173a5760405162461bcd60e51b815260206004820152604a60248201527f5465726d696e757346616365743a2063726561746553696d706c65506f6f6c2060448201527f2d2d20496e73756666696369656e7420616c6c6f77616e6365206f6e2070617960648201526936b2b73a103a37b5b2b760b11b608482015260a401610584565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038216906323b872dd906064016020604051808303816000875af115801561178d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b191906134d7565b6118395760405162461bcd60e51b815260206004820152604d60248201527f5465726d696e757346616365743a2063726561746553696d706c65506f6f6c2060448201527f2d2d205472616e73666572206f66207061796d656e7420746f6b656e2077617360648201526c081d5b9cdd58d8d95cdcd99d5b609a1b608482015260a401610584565b505b61184484612286565b949350505050565b6000611856611ad9565b60009283526004016020525060409020546001600160a01b031690565b61187d8233611f33565b6108c7828261262b565b6060611891611ad9565b600d01805461189f906134f4565b80601f01602080910402602001604051908101604052809291908181526020018280546118cb906134f4565b80156119185780601f106118ed57610100808354040283529160200191611918565b820191906000526020600020905b8154815290600101906020018083116118fb57829003601f168201915b5050505050905090565b600061192c611ad9565b6001600160a01b039384166000908152600b91909101602090815260408083209490951682529290925250205460ff1690565b6001600160a01b03851633148061197b575061197b8533611922565b8061198b575061198b8333610615565b6119fd5760405162461bcd60e51b815260206004820152603c60248201527f45524331313535576974685465726d696e757353746f726167653a2063616c6c60448201527f6572206973206e6f74206f776e6572206e6f7220617070726f766564000000006064820152608401610584565b610d58858585858561269a565b611a148233611f33565b6000611a1e611ad9565b6000938452600901602052506040909120805460ff19169115919091179055565b336001600160a01b038416811480611a5c5750611a5c8382610615565b611ace5760405162461bcd60e51b815260206004820152603b60248201527f5465726d696e757346616365743a206275726e202d2d2063616c6c657220697360448201527f206e656974686572206f776e6572206e6f7220617070726f76656400000000006064820152608401610584565b61073f848484612854565b7f5b75cffee14646b6a66e69def89545550d8d264a0f3260af2fdc807d91004caf90565b600080611b08611ad9565b60008581526004820160205260409020549091506001600160a01b0390811690841603611b395760019150506105bf565b6000848152600c8201602090815260408083206001600160a01b038716845290915290205460ff1615611b705760019150506105bf565b5060009392505050565b6000611b84611ad9565b80549091506001600160a01b031633146115a05760405162461bcd60e51b815260206004820152601f60248201527f4c69625465726d696e75733a204d75737420626520636f6e74726f6c6c6572006044820152606401610584565b600080611beb611ad9565b600201546001600160a01b0316905080611c5d5760405162461bcd60e51b815260206004820152602d60248201527f5465726d696e757346616365743a205061796d656e7420746f6b656e2068617360448201526c081b9bdd081899595b881cd95d609a1b6064820152608401610584565b919050565b6001600160a01b038416611c885760405162461bcd60e51b815260040161058490613713565b8151835114611ca95760405162461bcd60e51b815260040161058490613767565b6000611cb3611ad9565b90503360005b8551811015611ec357826006016000878381518110611cda57611cda61352e565b6020026020010151815260200190815260200160002054858281518110611d0357611d0361352e565b6020026020010151846007016000898581518110611d2357611d2361352e565b6020026020010151815260200190815260200160002054611d449190613573565b1115611dd35760405162461bcd60e51b815260206004820152605260248201527f45524331313535576974685465726d696e757353746f726167653a205f6d696e60448201527f744261746368202d2d204d696e74656420746f6b656e7320776f756c642065786064820152716365656420706f6f6c20636170616369747960701b608482015260a401610584565b848181518110611de557611de561352e565b6020026020010151836007016000888481518110611e0557611e0561352e565b602002602001015181526020019081526020016000206000828254611e2a9190613573565b92505081905550848181518110611e4357611e4361352e565b6020026020010151836008016000888481518110611e6357611e6361352e565b602002602001015181526020019081526020016000206000896001600160a01b03166001600160a01b031681526020019081526020016000206000828254611eab9190613573565b90915550819050611ebb8161355a565b915050611cb9565b50856001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8888604051611f149291906137c4565b60405180910390a4611f2b81600088888888612a98565b505050505050565b6000611f3d611ad9565b60008481526004820160205260409020549091506001600160a01b038381169116146115c55760405162461bcd60e51b8152602060048201526024808201527f4c69625465726d696e75733a204d75737420626520706f6f6c20636f6e74726f604482015263363632b960e11b6064820152608401610584565b6000611fc1611ad9565b6000938452600c01602090815260408085206001600160a01b039094168552929052509020805460ff19169055565b81518351146120115760405162461bcd60e51b815260040161058490613767565b6001600160a01b0384166120375760405162461bcd60e51b8152600401610584906137f2565b336000612042611ad9565b905060005b85518110156122175760008682815181106120645761206461352e565b6020026020010151905060008683815181106120825761208261352e565b60209081029190910181015160008481526009870190925260409091205490915060ff16156121305760405162461bcd60e51b815260206004820152604e60248201527f45524331313535576974685465726d696e757353746f726167653a205f73616660448201527f6542617463685472616e7366657246726f6d202d2d20706f6f6c206973206e6f60648201526d74207472616e7366657261626c6560901b608482015260a401610584565b600082815260088501602090815260408083206001600160a01b038e168452909152902054818110156121755760405162461bcd60e51b81526004016105849061384f565b81810385600801600085815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020819055508185600801600085815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546121fc9190613573565b92505081905550505050806122109061355a565b9050612047565b50856001600160a01b0316876001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb88886040516122679291906137c4565b60405180910390a461227d828888888888612a98565b50505050505050565b600080612291611ad9565b90506000816001015460016122a69190613573565b90506122b2813361262b565b60008181526006830160205260408120859055600183018054916122d58361355a565b9091555090949350505050565b6001600160a01b0384166123085760405162461bcd60e51b815260040161058490613713565b6000612312611ad9565b6000858152600682016020908152604080832054600785019092529091205491925090612340908590613573565b11156123ca5760405162461bcd60e51b815260206004820152604d60248201527f45524331313535576974685465726d696e757353746f726167653a205f6d696e60448201527f74202d2d204d696e74656420746f6b656e7320776f756c64206578636565642060648201526c706f6f6c20636170616369747960981b608482015260a401610584565b336123e4816000886123db89612c0c565b610d5889612c0c565b600085815260078301602052604081208054869290612404908490613573565b9091555050600085815260088301602090815260408083206001600160a01b038a1684529091528120805486929061243d908490613573565b909155505060408051868152602081018690526001600160a01b038089169260009291851691600080516020613a6f833981519152910160405180910390a4611f2b81600088888888612c57565b6000612495611ad9565b6000938452600c01602090815260408085206001600160a01b039094168552929052509020805460ff19166001179055565b60006124d1611ad9565b80546001600160a01b038481166001600160a01b031983168117845560405193945091169182907fa06677f7b64342b4bcbde423684dbdb5356acfe41ad0285b6ecbe6dc4bf427f290600090a3505050565b816001600160a01b0316836001600160a01b0316036125aa5760405162461bcd60e51b815260206004820152603c60248201527f45524331313535576974685465726d696e757353746f726167653a207365747460448201527f696e6720617070726f76616c2073746174757320666f722073656c66000000006064820152608401610584565b60006125b4611ad9565b6001600160a01b038581166000818152600b84016020908152604080832094891680845294825291829020805460ff19168815159081179091559151918252939450919290917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b6000612635611ad9565b600084815260048201602052604080822080546001600160a01b031981166001600160a01b03888116918217909355925194955016929091839187917fbb8e9c3c4a526b28a6b555c4def50ebda6412e188a3836bb2fbe72fd3757844291a450505050565b6001600160a01b0384166126c05760405162461bcd60e51b8152600401610584906137f2565b60006126ca611ad9565b600085815260098201602052604090205490915060ff16156127665760405162461bcd60e51b815260206004820152604960248201527f45524331313535576974685465726d696e757353746f726167653a205f73616660448201527f655472616e7366657246726f6d202d2d20706f6f6c206973206e6f74207472616064820152686e7366657261626c6560b81b608482015260a401610584565b336127768188886123db89612c0c565b600085815260088301602090815260408083206001600160a01b038b168452909152902054848110156127bb5760405162461bcd60e51b81526004016105849061384f565b600086815260088401602090815260408083206001600160a01b038c81168552925280832088850390559089168252812080548792906127fc908490613573565b909155505060408051878152602081018790526001600160a01b03808a16928b82169291861691600080516020613a6f833981519152910160405180910390a461284a828989898989612c57565b5050505050505050565b6001600160a01b0383166128c95760405162461bcd60e51b815260206004820152603660248201527f45524331313535576974685465726d696e757353746f726167653a206275726e6044820152752066726f6d20746865207a65726f206164647265737360501b6064820152608401610584565b60006128d3611ad9565b6000848152600a8201602052604090205490915060ff1661295c5760405162461bcd60e51b815260206004820152603960248201527f45524331313535576974685465726d696e757353746f726167653a205f62757260448201527f6e202d2d20706f6f6c206973206e6f74206275726e61626c65000000000000006064820152608401610584565b3361298c8186600061296d88612c0c565b61297688612c0c565b5050604080516020810190915260009052505050565b600084815260088301602090815260408083206001600160a01b038916845290915290205483811015612a275760405162461bcd60e51b815260206004820152603760248201527f45524331313535576974685465726d696e757353746f726167653a206275726e60448201527f20616d6f756e7420657863656564732062616c616e63650000000000000000006064820152608401610584565b600085815260088401602090815260408083206001600160a01b038a8116808652918452828520898703905589855260078801845282852080548a9003905582518a8152938401899052909290861691600080516020613a6f833981519152910160405180910390a4505050505050565b6001600160a01b0384163b15611f2b5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612adc90899089908890889088906004016138ac565b6020604051808303816000875af1925050508015612b17575060408051601f3d908101601f19168201909252612b149181019061390a565b60015b612bdc57612b23613927565b806308c379a003612b5c5750612b37613943565b80612b425750612b5e565b8060405162461bcd60e51b81526004016105849190612e11565b505b60405162461bcd60e51b815260206004820152604760248201527f45524331313535576974685465726d696e757353746f726167653a207472616e60448201527f7366657220746f206e6f6e2045524331313535526563656976657220696d706c60648201526632b6b2b73a32b960c91b608482015260a401610584565b6001600160e01b0319811663bc197c8160e01b1461227d5760405162461bcd60e51b8152600401610584906139cc565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612c4657612c4661352e565b602090810291909101015292915050565b6001600160a01b0384163b15611f2b5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612c9b9089908990889088908890600401613a29565b6020604051808303816000875af1925050508015612cd6575060408051601f3d908101601f19168201909252612cd39181019061390a565b60015b612ce257612b23613927565b6001600160e01b0319811663f23a6e6160e01b1461227d5760405162461bcd60e51b8152600401610584906139cc565b80356001600160a01b0381168114611c5d57600080fd5b60008060408385031215612d3c57600080fd5b612d4583612d12565b946020939093013593505050565b6001600160e01b0319811681146115a057600080fd5b600060208284031215612d7b57600080fd5b813561062181612d53565b60008060408385031215612d9957600080fd5b82359150612da960208401612d12565b90509250929050565b600060208284031215612dc457600080fd5b5035919050565b6000815180845260005b81811015612df157602081850181015186830182015201612dd5565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106216020830184612dcb565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612e5f57612e5f612e24565b6040525050565b60006001600160401b03821115612e7f57612e7f612e24565b5060051b60200190565b600082601f830112612e9a57600080fd5b81356020612ea782612e66565b604051612eb48282612e3a565b83815260059390931b8501820192828101915086841115612ed457600080fd5b8286015b84811015612eef5780358352918301918301612ed8565b509695505050505050565b600082601f830112612f0b57600080fd5b81356001600160401b03811115612f2457612f24612e24565b604051612f3b601f8301601f191660200182612e3a565b818152846020838601011115612f5057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612f8357600080fd5b612f8c85612d12565b935060208501356001600160401b0380821115612fa857600080fd5b612fb488838901612e89565b94506040870135915080821115612fca57600080fd5b612fd688838901612e89565b93506060870135915080821115612fec57600080fd5b50612ff987828801612efa565b91505092959194509250565b600082601f83011261301657600080fd5b8135602061302382612e66565b6040516130308282612e3a565b83815260059390931b850182019282810191508684111561305057600080fd5b8286015b84811015612eef5761306581612d12565b8352918301918301613054565b60008060006060848603121561308757600080fd5b8335925060208401356001600160401b03808211156130a557600080fd5b6130b187838801613005565b935060408601359150808211156130c757600080fd5b506130d486828701612e89565b9150509250925092565b80151581146115a057600080fd5b600080604083850312156130ff57600080fd5b823591506020830135613111816130de565b809150509250929050565b600080600080600060a0868803121561313457600080fd5b61313d86612d12565b945061314b60208701612d12565b935060408601356001600160401b038082111561316757600080fd5b61317389838a01612e89565b9450606088013591508082111561318957600080fd5b61319589838a01612e89565b935060808801359150808211156131ab57600080fd5b506131b888828901612efa565b9150509295509295909350565b6000806000606084860312156131da57600080fd5b8335925060208401356131ec816130de565b915060408401356131fc816130de565b809150509250925092565b6000806040838503121561321a57600080fd5b82356001600160401b038082111561323157600080fd5b61323d86838701613005565b9350602085013591508082111561325357600080fd5b5061326085828601612e89565b9150509250929050565b600081518084526020808501945080840160005b8381101561329a5781518752958201959082019060010161327e565b509495945050505050565b602081526000610621602083018461326a565b6000602082840312156132ca57600080fd5b61062182612d12565b600080600080608085870312156132e957600080fd5b6132f285612d12565b9350602085013592506040850135915060608501356001600160401b0381111561331b57600080fd5b612ff987828801612efa565b6000806000806080858703121561333d57600080fd5b84359350602085013561334f816130de565b9250604085013561335f816130de565b915060608501356001600160401b0381111561331b57600080fd5b6000806040838503121561338d57600080fd5b8235915060208301356001600160401b038111156133aa57600080fd5b61326085828601612efa565b6000602082840312156133c857600080fd5b81356001600160401b038111156133de57600080fd5b61184484828501612efa565b600080604083850312156133fd57600080fd5b61340683612d12565b91506020830135613111816130de565b6000806040838503121561342957600080fd5b61343283612d12565b9150612da960208401612d12565b600080600080600060a0868803121561345857600080fd5b61346186612d12565b945061346f60208701612d12565b9350604086013592506060860135915060808601356001600160401b0381111561349857600080fd5b6131b888828901612efa565b6000806000606084860312156134b957600080fd5b6134c284612d12565b95602085013595506040909401359392505050565b6000602082840312156134e957600080fd5b8151610621816130de565b600181811c9082168061350857607f821691505b60208210810361352857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161356c5761356c613544565b5060010190565b808201808211156105bf576105bf613544565b6001600160a01b038481168252606060208084018290528551918401829052600092868201929091906080860190855b818110156135d45785518516835294830194918301916001016135b6565b505085810360408701526135e8818861326a565b9998505050505050505050565b60006020828403121561360757600080fd5b5051919050565b601f8211156115c557600081815260208120601f850160051c810160208610156136355750805b601f850160051c820191505b81811015611f2b57828155600101613641565b81516001600160401b0381111561366d5761366d612e24565b6136818161367b84546134f4565b8461360e565b602080601f8311600181146136b6576000841561369e5750858301515b600019600386901b1c1916600185901b178555611f2b565b600085815260208120601f198616915b828110156136e5578886015182559484019460019091019084016136c6565b50858210156137035787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526034908201527f45524331313535576974685465726d696e757353746f726167653a206d696e7460408201527320746f20746865207a65726f206164647265737360601b606082015260800190565b6020808252603b908201527f45524331313535576974685465726d696e757353746f726167653a206964732060408201527f616e6420616d6f756e7473206c656e677468206d69736d617463680000000000606082015260800190565b6040815260006137d7604083018561326a565b82810360208401526137e9818561326a565b95945050505050565b60208082526038908201527f45524331313535576974685465726d696e757353746f726167653a207472616e60408201527f7366657220746f20746865207a65726f20616464726573730000000000000000606082015260800190565b6020808252603d908201527f45524331313535576974685465726d696e757353746f726167653a20696e737560408201527f6666696369656e742062616c616e636520666f72207472616e73666572000000606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906138d89083018661326a565b82810360608401526138ea818661326a565b905082810360808401526138fe8185612dcb565b98975050505050505050565b60006020828403121561391c57600080fd5b815161062181612d53565b600060033d11156139405760046000803e5060005160e01c5b90565b600060443d10156139515790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561398057505050505090565b82850191508151818111156139985750505050505090565b843d87010160208285010111156139b25750505050505090565b6139c160208286010187612e3a565b509095945050505050565b6020808252603b908201527f45524331313535576974685465726d696e757353746f726167653a204552433160408201527f31353552656365697665722072656a656374656420746f6b656e730000000000606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613a6390830184612dcb565b97965050505050505056fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a2646970667358221220564579c25c071b3a11be8590989f178965a81fda6dfc6a65557e5f8be2dcf34a64736f6c63430008120033",
    "abi": [
        {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor",
            "name": "deploy",
        },
        {
            "anonymous": False,
            "inputs": [
                {
                    "indexed": True,
                    "internalType": "address",
                    "name": "account",
                    "type": "address",
                },
                {
                    "indexed": True,
                    "internalType": "address",
                    "name": "operator",
                    "type": "address",
                },
                {
                    "indexed": False,
                    "internalType": "bool",
                    "name": "approved",
                    "type": "bool",
                },
            ],
            "name": "ApprovalForAll",
            "type": "event",
        },
        {
            "anonymous": False,
            "inputs": [
                {
                    "indexed": True,
                    "internalType": "uint256",
                    "name": "id",
                    "type": "uint256",
                },
                {
                    "indexed": True,
                    "internalType": "address",
                    "name": "operator",
                    "type": "address",
                },
                {
                    "indexed": False,
                    "internalType": "address",
                    "name": "from",
                    "type": "address",
                },
                {
                    "indexed": False,
                    "internalType": "address[]",
                    "name": "toAddresses",
                    "type": "address[]",
                },
                {
                    "indexed": False,
                    "internalType": "uint256[]",
                    "name": "amounts",
                    "type": "uint256[]",
                },
            ],
            "name": "PoolMintBatch",
            "type": "event",
        },
        {
            "anonymous": False,
            "inputs": [
                {
                    "indexed": True,
                    "internalType": "address",
                    "name": "operator",
                    "type": "address",
                },
                {
                    "indexed": True,
                    "internalType": "address",
                    "name": "from",
                    "type": "address",
                },
                {
                    "indexed": True,
                    "internalType": "address",
                    "name": "to",
                    "type": "address",
                },
                {
                    "indexed": False,
                    "internalType": "uint256[]",
                    "name": "ids",
                    "type": "uint256[]",
                },
                {
                    "indexed": False,
                    "internalType": "uint256[]",
                    "name": "values",
                    "type": "uint256[]",
                },
            ],
            "name": "TransferBatch",
            "type": "event",
        },
        {
            "anonymous": False,
            "inputs": [
                {
                    "indexed": True,
                    "internalType": "address",
                    "name": "operator",
                    "type": "address",
                },
                {
                    "indexed": True,
                    "internalType": "address",
                    "name": "from",
                    "type": "address",
                },
                {
                    "indexed": True,
                    "internalType": "address",
                    "name": "to",
                    "type": "address",
                },
                {
                    "indexed": False,
                    "internalType": "uint256",
                    "name": "id",
                    "type": "uint256",
                },
                {
                    "indexed": False,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256",
                },
            ],
            "name": "TransferSingle",
            "type": "event",
        },
        {
            "anonymous": False,
            "inputs": [
                {
                    "indexed": False,
                    "internalType": "string",
                    "name": "value",
                    "type": "string",
                },
                {
                    "indexed": True,
                    "internalType": "uint256",
                    "name": "id",
                    "type": "uint256",
                },
            ],
            "name": "URI",
            "type": "event",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"},
                {"internalType": "address", "name": "operator", "type": "address"},
            ],
            "name": "approveForPool",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "account", "type": "address"},
                {"internalType": "uint256", "name": "id", "type": "uint256"},
            ],
            "name": "balanceOf",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address[]", "name": "accounts", "type": "address[]"},
                {"internalType": "uint256[]", "name": "ids", "type": "uint256[]"},
            ],
            "name": "balanceOfBatch",
            "outputs": [{"internalType": "uint256[]", "name": "", "type": "uint256[]"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "from", "type": "address"},
                {"internalType": "uint256", "name": "poolID", "type": "uint256"},
                {"internalType": "uint256", "name": "amount", "type": "uint256"},
            ],
            "name": "burn",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [],
            "name": "contractURI",
            "outputs": [{"internalType": "string", "name": "", "type": "string"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "_capacity", "type": "uint256"},
                {"internalType": "bool", "name": "_transferable", "type": "bool"},
                {"internalType": "bool", "name": "_burnable", "type": "bool"},
            ],
            "name": "createPoolV1",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "_capacity", "type": "uint256"},
                {"internalType": "bool", "name": "_transferable", "type": "bool"},
                {"internalType": "bool", "name": "_burnable", "type": "bool"},
                {"internalType": "string", "name": "poolURI", "type": "string"},
            ],
            "name": "createPoolV2",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "_capacity", "type": "uint256"}
            ],
            "name": "createSimplePool",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "account", "type": "address"},
                {"internalType": "address", "name": "operator", "type": "address"},
            ],
            "name": "isApprovedForAll",
            "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"},
                {"internalType": "address", "name": "operator", "type": "address"},
            ],
            "name": "isApprovedForPool",
            "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "to", "type": "address"},
                {"internalType": "uint256", "name": "poolID", "type": "uint256"},
                {"internalType": "uint256", "name": "amount", "type": "uint256"},
                {"internalType": "bytes", "name": "data", "type": "bytes"},
            ],
            "name": "mint",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "to", "type": "address"},
                {"internalType": "uint256[]", "name": "poolIDs", "type": "uint256[]"},
                {"internalType": "uint256[]", "name": "amounts", "type": "uint256[]"},
                {"internalType": "bytes", "name": "data", "type": "bytes"},
            ],
            "name": "mintBatch",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [],
            "name": "paymentToken",
            "outputs": [{"internalType": "address", "name": "", "type": "address"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [],
            "name": "poolBasePrice",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"}
            ],
            "name": "poolIsBurnable",
            "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"}
            ],
            "name": "poolIsTransferable",
            "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "id", "type": "uint256"},
                {
                    "internalType": "address[]",
                    "name": "toAddresses",
                    "type": "address[]",
                },
                {"internalType": "uint256[]", "name": "amounts", "type": "uint256[]"},
            ],
            "name": "poolMintBatch",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "from", "type": "address"},
                {"internalType": "address", "name": "to", "type": "address"},
                {"internalType": "uint256[]", "name": "ids", "type": "uint256[]"},
                {"internalType": "uint256[]", "name": "amounts", "type": "uint256[]"},
                {"internalType": "bytes", "name": "data", "type": "bytes"},
            ],
            "name": "safeBatchTransferFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "from", "type": "address"},
                {"internalType": "address", "name": "to", "type": "address"},
                {"internalType": "uint256", "name": "id", "type": "uint256"},
                {"internalType": "uint256", "name": "amount", "type": "uint256"},
                {"internalType": "bytes", "name": "data", "type": "bytes"},
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "operator", "type": "address"},
                {"internalType": "bool", "name": "approved", "type": "bool"},
            ],
            "name": "setApprovalForAll",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "string", "name": "_contractURI", "type": "string"}
            ],
            "name": "setContractURI",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "newController", "type": "address"}
            ],
            "name": "setController",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newPaymentToken",
                    "type": "address",
                }
            ],
            "name": "setPaymentToken",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "newBasePrice", "type": "uint256"}
            ],
            "name": "setPoolBasePrice",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"},
                {"internalType": "bool", "name": "burnable", "type": "bool"},
            ],
            "name": "setPoolBurnable",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"},
                {"internalType": "address", "name": "newController", "type": "address"},
            ],
            "name": "setPoolController",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"},
                {"internalType": "bool", "name": "transferable", "type": "bool"},
            ],
            "name": "setPoolTransferable",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"},
                {"internalType": "string", "name": "poolURI", "type": "string"},
            ],
            "name": "setURI",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "bytes4", "name": "interfaceId", "type": "bytes4"}
            ],
            "name": "supportsInterface",
            "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [],
            "name": "terminusController",
            "outputs": [{"internalType": "address", "name": "", "type": "address"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"}
            ],
            "name": "terminusPoolCapacity",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"}
            ],
            "name": "terminusPoolController",
            "outputs": [{"internalType": "address", "name": "", "type": "address"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"}
            ],
            "name": "terminusPoolSupply",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [],
            "name": "totalPools",
            "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"},
                {"internalType": "address", "name": "operator", "type": "address"},
            ],
            "name": "unapproveForPool",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "uint256", "name": "poolID", "type": "uint256"}
            ],
            "name": "uri",
            "outputs": [{"internalType": "string", "name": "", "type": "string"}],
            "stateMutability": "view",
            "type": "function",
        },
        {
            "inputs": [
                {"internalType": "address", "name": "toAddress", "type": "address"},
                {"internalType": "uint256", "name": "amount", "type": "uint256"},
            ],
            "name": "withdrawPayments",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function",
        },
    ],
    "contractName": "TerminusFacet",
}


def get_abi_json(*args) -> List[Dict[str, Any]]:
    return CONTRACT_BUILD["abi"]


# This is workaround to deploy new contract which has only bytecode and abi in brownie
class CustomContract(Contract):
    @classmethod
    def from_build_object(cls, build: Dict[str, Any]):
        self = cls.__new__(cls)
        self.bytecode = build["bytecode"]
        _ContractBase.__init__(self, None, build, {})  # type: ignore
        self.deploy = ContractConstructor(self, self._name)
        self.addres = None
        return self

    def _add_from_tx(self, tx: TransactionReceiptType) -> None:
        tx._confirmed.wait()
        if tx.status and tx.contract_address is not None:
            self.address = tx.contract_address
            self.tx = tx
            self._owner = tx.sender
            try:
                self.at(tx.contract_address, tx.sender, tx)
            except ContractNotFound:
                # if the contract self-destructed during deployment
                pass

    def at(
        self,
        address: str,
        owner: Any = None,
        tx: Optional[TransactionReceiptType] = None,
        persist: bool = True,
    ) -> Contract:
        contract = Contract.from_abi(self._name, self.address, self.abi)
        contract.tx = self.tx
        return contract


def contract_from_build(*args) -> CustomContract:
    return CustomContract.from_build_object(CONTRACT_BUILD)


def boolean_argument_type(raw_value: str) -> bool:
    TRUE_VALUES = ["1", "t", "y", "true", "yes"]
    FALSE_VALUES = ["0", "f", "n", "false", "no"]

    if raw_value.lower() in TRUE_VALUES:
        return True
    elif raw_value.lower() in FALSE_VALUES:
        return False

    raise ValueError(
        f"Invalid boolean argument: {raw_value}. Value must be one of: {','.join(TRUE_VALUES + FALSE_VALUES)}"
    )


def bytes_argument_type(raw_value: str) -> str:
    return raw_value


class TerminusFacet:
    def __init__(self, contract_address: Optional[ChecksumAddress]):
        self.contract_name = "TerminusFacet"
        self.address = contract_address
        self.contract = None
        self.abi = get_abi_json("TerminusFacet")
        if self.address is not None:
            self.contract: Optional[Contract] = Contract.from_abi(
                self.contract_name, self.address, self.abi
            )

    def deploy(self, transaction_config):
        contract_class = contract_from_build(self.contract_name)
        deployed_contract = contract_class.deploy(transaction_config)
        self.address = deployed_contract.address
        self.contract = deployed_contract
        return deployed_contract.tx

    def assert_contract_is_instantiated(self) -> None:
        if self.contract is None:
            raise Exception("contract has not been instantiated")

    def verify_contract(self):
        self.assert_contract_is_instantiated()
        contract_class = contract_from_build(self.contract_name)
        contract_class.publish_source(self.contract)

    def approve_for_pool(
        self, pool_id: int, operator: ChecksumAddress, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.approveForPool(pool_id, operator, transaction_config)

    def balance_of(
        self,
        account: ChecksumAddress,
        id: int,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.balanceOf.call(account, id, block_identifier=block_number)

    def balance_of_batch(
        self,
        accounts: List,
        ids: List,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.balanceOfBatch.call(
            accounts, ids, block_identifier=block_number
        )

    def burn(
        self, from_: ChecksumAddress, pool_id: int, amount: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.burn(from_, pool_id, amount, transaction_config)

    def contract_uri(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.contractURI.call(block_identifier=block_number)

    def create_pool_v1(
        self, _capacity: int, _transferable: bool, _burnable: bool, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.createPoolV1(
            _capacity, _transferable, _burnable, transaction_config
        )

    def create_pool_v2(
        self,
        _capacity: int,
        _transferable: bool,
        _burnable: bool,
        pool_uri: str,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.createPoolV2(
            _capacity, _transferable, _burnable, pool_uri, transaction_config
        )

    def create_simple_pool(self, _capacity: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.createSimplePool(_capacity, transaction_config)

    def is_approved_for_all(
        self,
        account: ChecksumAddress,
        operator: ChecksumAddress,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.isApprovedForAll.call(
            account, operator, block_identifier=block_number
        )

    def is_approved_for_pool(
        self,
        pool_id: int,
        operator: ChecksumAddress,
        block_number: Optional[Union[str, int]] = "latest",
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.isApprovedForPool.call(
            pool_id, operator, block_identifier=block_number
        )

    def mint(
        self,
        to: ChecksumAddress,
        pool_id: int,
        amount: int,
        data: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.mint(to, pool_id, amount, data, transaction_config)

    def mint_batch(
        self,
        to: ChecksumAddress,
        pool_i_ds: List,
        amounts: List,
        data: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.mintBatch(to, pool_i_ds, amounts, data, transaction_config)

    def payment_token(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.paymentToken.call(block_identifier=block_number)

    def pool_base_price(
        self, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.poolBasePrice.call(block_identifier=block_number)

    def pool_is_burnable(
        self, pool_id: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.poolIsBurnable.call(pool_id, block_identifier=block_number)

    def pool_is_transferable(
        self, pool_id: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.poolIsTransferable.call(
            pool_id, block_identifier=block_number
        )

    def pool_mint_batch(
        self, id: int, to_addresses: List, amounts: List, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.poolMintBatch(
            id, to_addresses, amounts, transaction_config
        )

    def safe_batch_transfer_from(
        self,
        from_: ChecksumAddress,
        to: ChecksumAddress,
        ids: List,
        amounts: List,
        data: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.safeBatchTransferFrom(
            from_, to, ids, amounts, data, transaction_config
        )

    def safe_transfer_from(
        self,
        from_: ChecksumAddress,
        to: ChecksumAddress,
        id: int,
        amount: int,
        data: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.safeTransferFrom(
            from_, to, id, amount, data, transaction_config
        )

    def set_approval_for_all(
        self, operator: ChecksumAddress, approved: bool, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setApprovalForAll(operator, approved, transaction_config)

    def set_contract_uri(self, _contract_uri: str, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setContractURI(_contract_uri, transaction_config)

    def set_controller(
        self, new_controller: ChecksumAddress, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setController(new_controller, transaction_config)

    def set_payment_token(
        self, new_payment_token: ChecksumAddress, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setPaymentToken(new_payment_token, transaction_config)

    def set_pool_base_price(self, new_base_price: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setPoolBasePrice(new_base_price, transaction_config)

    def set_pool_burnable(
        self, pool_id: int, burnable: bool, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setPoolBurnable(pool_id, burnable, transaction_config)

    def set_pool_controller(
        self, pool_id: int, new_controller: ChecksumAddress, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setPoolController(
            pool_id, new_controller, transaction_config
        )

    def set_pool_transferable(
        self, pool_id: int, transferable: bool, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setPoolTransferable(
            pool_id, transferable, transaction_config
        )

    def set_uri(self, pool_id: int, pool_uri: str, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setURI(pool_id, pool_uri, transaction_config)

    def supports_interface(
        self, interface_id: bytes, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.supportsInterface.call(
            interface_id, block_identifier=block_number
        )

    def terminus_controller(
        self, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.terminusController.call(block_identifier=block_number)

    def terminus_pool_capacity(
        self, pool_id: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.terminusPoolCapacity.call(
            pool_id, block_identifier=block_number
        )

    def terminus_pool_controller(
        self, pool_id: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.terminusPoolController.call(
            pool_id, block_identifier=block_number
        )

    def terminus_pool_supply(
        self, pool_id: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.terminusPoolSupply.call(
            pool_id, block_identifier=block_number
        )

    def total_pools(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.totalPools.call(block_identifier=block_number)

    def unapprove_for_pool(
        self, pool_id: int, operator: ChecksumAddress, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.unapproveForPool(pool_id, operator, transaction_config)

    def uri(
        self, pool_id: int, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.uri.call(pool_id, block_identifier=block_number)

    def withdraw_payments(
        self, to_address: ChecksumAddress, amount: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.withdrawPayments(to_address, amount, transaction_config)


def get_transaction_config(args: argparse.Namespace) -> Dict[str, Any]:
    signer = network.accounts.load(args.sender, args.password)
    transaction_config: Dict[str, Any] = {"from": signer}
    if args.gas_price is not None:
        transaction_config["gas_price"] = args.gas_price
    if args.max_fee_per_gas is not None:
        transaction_config["max_fee"] = args.max_fee_per_gas
    if args.max_priority_fee_per_gas is not None:
        transaction_config["priority_fee"] = args.max_priority_fee_per_gas
    if args.confirmations is not None:
        transaction_config["required_confs"] = args.confirmations
    if args.nonce is not None:
        transaction_config["nonce"] = args.nonce
    return transaction_config


def add_default_arguments(parser: argparse.ArgumentParser, transact: bool) -> None:
    parser.add_argument(
        "--network", required=True, help="Name of brownie network to connect to"
    )
    parser.add_argument(
        "--address", required=False, help="Address of deployed contract to connect to"
    )
    if not transact:
        parser.add_argument(
            "--block-number",
            required=False,
            type=int,
            help="Call at the given block number, defaults to latest",
        )
        return
    parser.add_argument(
        "--sender", required=True, help="Path to keystore file for transaction sender"
    )
    parser.add_argument(
        "--password",
        required=False,
        help="Password to keystore file (if you do not provide it, you will be prompted for it)",
    )
    parser.add_argument(
        "--gas-price", default=None, help="Gas price at which to submit transaction"
    )
    parser.add_argument(
        "--max-fee-per-gas",
        default=None,
        help="Max fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--max-priority-fee-per-gas",
        default=None,
        help="Max priority fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--confirmations",
        type=int,
        default=None,
        help="Number of confirmations to await before considering a transaction completed",
    )
    parser.add_argument(
        "--nonce", type=int, default=None, help="Nonce for the transaction (optional)"
    )
    parser.add_argument(
        "--value", default=None, help="Value of the transaction in wei(optional)"
    )
    parser.add_argument("--verbose", action="store_true", help="Print verbose output")


def handle_deploy(args: argparse.Namespace) -> None:
    network.connect(args.network)
    transaction_config = get_transaction_config(args)
    contract = TerminusFacet(None)
    result = contract.deploy(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_verify_contract(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.verify_contract()
    print(result)


def handle_approve_for_pool(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.approve_for_pool(
        pool_id=args.pool_id,
        operator=args.operator,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_balance_of(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.balance_of(
        account=args.account, id=args.id, block_number=args.block_number
    )
    print(result)


def handle_balance_of_batch(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.balance_of_batch(
        accounts=args.accounts, ids=args.ids, block_number=args.block_number
    )
    print(result)


def handle_burn(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.burn(
        from_=args.from_arg,
        pool_id=args.pool_id,
        amount=args.amount,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_contract_uri(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.contract_uri(block_number=args.block_number)
    print(result)


def handle_create_pool_v1(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.create_pool_v1(
        _capacity=args.capacity_arg,
        _transferable=args.transferable_arg,
        _burnable=args.burnable_arg,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_create_pool_v2(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.create_pool_v2(
        _capacity=args.capacity_arg,
        _transferable=args.transferable_arg,
        _burnable=args.burnable_arg,
        pool_uri=args.pool_uri,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_create_simple_pool(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.create_simple_pool(
        _capacity=args.capacity_arg, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_is_approved_for_all(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.is_approved_for_all(
        account=args.account, operator=args.operator, block_number=args.block_number
    )
    print(result)


def handle_is_approved_for_pool(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.is_approved_for_pool(
        pool_id=args.pool_id, operator=args.operator, block_number=args.block_number
    )
    print(result)


def handle_mint(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.mint(
        to=args.to,
        pool_id=args.pool_id,
        amount=args.amount,
        data=args.data,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_mint_batch(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.mint_batch(
        to=args.to,
        pool_i_ds=args.pool_i_ds,
        amounts=args.amounts,
        data=args.data,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_payment_token(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.payment_token(block_number=args.block_number)
    print(result)


def handle_pool_base_price(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.pool_base_price(block_number=args.block_number)
    print(result)


def handle_pool_is_burnable(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.pool_is_burnable(
        pool_id=args.pool_id, block_number=args.block_number
    )
    print(result)


def handle_pool_is_transferable(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.pool_is_transferable(
        pool_id=args.pool_id, block_number=args.block_number
    )
    print(result)


def handle_pool_mint_batch(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.pool_mint_batch(
        id=args.id,
        to_addresses=args.to_addresses,
        amounts=args.amounts,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_safe_batch_transfer_from(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.safe_batch_transfer_from(
        from_=args.from_arg,
        to=args.to,
        ids=args.ids,
        amounts=args.amounts,
        data=args.data,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_safe_transfer_from(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.safe_transfer_from(
        from_=args.from_arg,
        to=args.to,
        id=args.id,
        amount=args.amount,
        data=args.data,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_approval_for_all(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_approval_for_all(
        operator=args.operator,
        approved=args.approved,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_contract_uri(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_contract_uri(
        _contract_uri=args.contract_uri_arg, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_controller(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_controller(
        new_controller=args.new_controller, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_payment_token(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_payment_token(
        new_payment_token=args.new_payment_token, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_pool_base_price(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_pool_base_price(
        new_base_price=args.new_base_price, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_pool_burnable(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_pool_burnable(
        pool_id=args.pool_id,
        burnable=args.burnable,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_pool_controller(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_pool_controller(
        pool_id=args.pool_id,
        new_controller=args.new_controller,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_pool_transferable(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_pool_transferable(
        pool_id=args.pool_id,
        transferable=args.transferable,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_uri(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_uri(
        pool_id=args.pool_id,
        pool_uri=args.pool_uri,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_supports_interface(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.supports_interface(
        interface_id=args.interface_id, block_number=args.block_number
    )
    print(result)


def handle_terminus_controller(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.terminus_controller(block_number=args.block_number)
    print(result)


def handle_terminus_pool_capacity(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.terminus_pool_capacity(
        pool_id=args.pool_id, block_number=args.block_number
    )
    print(result)


def handle_terminus_pool_controller(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.terminus_pool_controller(
        pool_id=args.pool_id, block_number=args.block_number
    )
    print(result)


def handle_terminus_pool_supply(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.terminus_pool_supply(
        pool_id=args.pool_id, block_number=args.block_number
    )
    print(result)


def handle_total_pools(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.total_pools(block_number=args.block_number)
    print(result)


def handle_unapprove_for_pool(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.unapprove_for_pool(
        pool_id=args.pool_id,
        operator=args.operator,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_uri(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    result = contract.uri(pool_id=args.pool_id, block_number=args.block_number)
    print(result)


def handle_withdraw_payments(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = TerminusFacet(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.withdraw_payments(
        to_address=args.to_address,
        amount=args.amount,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def generate_cli() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="CLI for TerminusFacet")
    parser.set_defaults(func=lambda _: parser.print_help())
    subcommands = parser.add_subparsers()

    deploy_parser = subcommands.add_parser("deploy")
    add_default_arguments(deploy_parser, True)
    deploy_parser.set_defaults(func=handle_deploy)

    verify_contract_parser = subcommands.add_parser("verify-contract")
    add_default_arguments(verify_contract_parser, False)
    verify_contract_parser.set_defaults(func=handle_verify_contract)

    approve_for_pool_parser = subcommands.add_parser("approve-for-pool")
    add_default_arguments(approve_for_pool_parser, True)
    approve_for_pool_parser.add_argument(
        "--pool-id", required=True, help="Type: uint256", type=int
    )
    approve_for_pool_parser.add_argument(
        "--operator", required=True, help="Type: address"
    )
    approve_for_pool_parser.set_defaults(func=handle_approve_for_pool)

    balance_of_parser = subcommands.add_parser("balance-of")
    add_default_arguments(balance_of_parser, False)
    balance_of_parser.add_argument("--account", required=True, help="Type: address")
    balance_of_parser.add_argument(
        "--id", required=True, help="Type: uint256", type=int
    )
    balance_of_parser.set_defaults(func=handle_balance_of)

    balance_of_batch_parser = subcommands.add_parser("balance-of-batch")
    add_default_arguments(balance_of_batch_parser, False)
    balance_of_batch_parser.add_argument(
        "--accounts", required=True, help="Type: address[]", nargs="+"
    )
    balance_of_batch_parser.add_argument(
        "--ids", required=True, help="Type: uint256[]", nargs="+"
    )
    balance_of_batch_parser.set_defaults(func=handle_balance_of_batch)

    burn_parser = subcommands.add_parser("burn")
    add_default_arguments(burn_parser, True)
    burn_parser.add_argument("--from-arg", required=True, help="Type: address")
    burn_parser.add_argument("--pool-id", required=True, help="Type: uint256", type=int)
    burn_parser.add_argument("--amount", required=True, help="Type: uint256", type=int)
    burn_parser.set_defaults(func=handle_burn)

    contract_uri_parser = subcommands.add_parser("contract-uri")
    add_default_arguments(contract_uri_parser, False)
    contract_uri_parser.set_defaults(func=handle_contract_uri)

    create_pool_v1_parser = subcommands.add_parser("create-pool-v1")
    add_default_arguments(create_pool_v1_parser, True)
    create_pool_v1_parser.add_argument(
        "--capacity-arg", required=True, help="Type: uint256", type=int
    )
    create_pool_v1_parser.add_argument(
        "--transferable-arg",
        required=True,
        help="Type: bool",
        type=boolean_argument_type,
    )
    create_pool_v1_parser.add_argument(
        "--burnable-arg", required=True, help="Type: bool", type=boolean_argument_type
    )
    create_pool_v1_parser.set_defaults(func=handle_create_pool_v1)

    create_pool_v2_parser = subcommands.add_parser("create-pool-v2")
    add_default_arguments(create_pool_v2_parser, True)
    create_pool_v2_parser.add_argument(
        "--capacity-arg", required=True, help="Type: uint256", type=int
    )
    create_pool_v2_parser.add_argument(
        "--transferable-arg",
        required=True,
        help="Type: bool",
        type=boolean_argument_type,
    )
    create_pool_v2_parser.add_argument(
        "--burnable-arg", required=True, help="Type: bool", type=boolean_argument_type
    )
    create_pool_v2_parser.add_argument(
        "--pool-uri", required=True, help="Type: string", type=str
    )
    create_pool_v2_parser.set_defaults(func=handle_create_pool_v2)

    create_simple_pool_parser = subcommands.add_parser("create-simple-pool")
    add_default_arguments(create_simple_pool_parser, True)
    create_simple_pool_parser.add_argument(
        "--capacity-arg", required=True, help="Type: uint256", type=int
    )
    create_simple_pool_parser.set_defaults(func=handle_create_simple_pool)

    is_approved_for_all_parser = subcommands.add_parser("is-approved-for-all")
    add_default_arguments(is_approved_for_all_parser, False)
    is_approved_for_all_parser.add_argument(
        "--account", required=True, help="Type: address"
    )
    is_approved_for_all_parser.add_argument(
        "--operator", required=True, help="Type: address"
    )
    is_approved_for_all_parser.set_defaults(func=handle_is_approved_for_all)

    is_approved_for_pool_parser = subcommands.add_parser("is-approved-for-pool")
    add_default_arguments(is_approved_for_pool_parser, False)
    is_approved_for_pool_parser.add_argument(
        "--pool-id", required=True, help="Type: uint256", type=int
    )
    is_approved_for_pool_parser.add_argument(
        "--operator", required=True, help="Type: address"
    )
    is_approved_for_pool_parser.set_defaults(func=handle_is_approved_for_pool)

    mint_parser = subcommands.add_parser("mint")
    add_default_arguments(mint_parser, True)
    mint_parser.add_argument("--to", required=True, help="Type: address")
    mint_parser.add_argument("--pool-id", required=True, help="Type: uint256", type=int)
    mint_parser.add_argument("--amount", required=True, help="Type: uint256", type=int)
    mint_parser.add_argument(
        "--data", required=True, help="Type: bytes", type=bytes_argument_type
    )
    mint_parser.set_defaults(func=handle_mint)

    mint_batch_parser = subcommands.add_parser("mint-batch")
    add_default_arguments(mint_batch_parser, True)
    mint_batch_parser.add_argument("--to", required=True, help="Type: address")
    mint_batch_parser.add_argument(
        "--pool-i-ds", required=True, help="Type: uint256[]", nargs="+"
    )
    mint_batch_parser.add_argument(
        "--amounts", required=True, help="Type: uint256[]", nargs="+"
    )
    mint_batch_parser.add_argument(
        "--data", required=True, help="Type: bytes", type=bytes_argument_type
    )
    mint_batch_parser.set_defaults(func=handle_mint_batch)

    payment_token_parser = subcommands.add_parser("payment-token")
    add_default_arguments(payment_token_parser, False)
    payment_token_parser.set_defaults(func=handle_payment_token)

    pool_base_price_parser = subcommands.add_parser("pool-base-price")
    add_default_arguments(pool_base_price_parser, False)
    pool_base_price_parser.set_defaults(func=handle_pool_base_price)

    pool_is_burnable_parser = subcommands.add_parser("pool-is-burnable")
    add_default_arguments(pool_is_burnable_parser, False)
    pool_is_burnable_parser.add_argument(
        "--pool-id", required=True, help="Type: uint256", type=int
    )
    pool_is_burnable_parser.set_defaults(func=handle_pool_is_burnable)

    pool_is_transferable_parser = subcommands.add_parser("pool-is-transferable")
    add_default_arguments(pool_is_transferable_parser, False)
    pool_is_transferable_parser.add_argument(
        "--pool-id", required=True, help="Type: uint256", type=int
    )
    pool_is_transferable_parser.set_defaults(func=handle_pool_is_transferable)

    pool_mint_batch_parser = subcommands.add_parser("pool-mint-batch")
    add_default_arguments(pool_mint_batch_parser, True)
    pool_mint_batch_parser.add_argument(
        "--id", required=True, help="Type: uint256", type=int
    )
    pool_mint_batch_parser.add_argument(
        "--to-addresses", required=True, help="Type: address[]", nargs="+"
    )
    pool_mint_batch_parser.add_argument(
        "--amounts", required=True, help="Type: uint256[]", nargs="+"
    )
    pool_mint_batch_parser.set_defaults(func=handle_pool_mint_batch)

    safe_batch_transfer_from_parser = subcommands.add_parser("safe-batch-transfer-from")
    add_default_arguments(safe_batch_transfer_from_parser, True)
    safe_batch_transfer_from_parser.add_argument(
        "--from-arg", required=True, help="Type: address"
    )
    safe_batch_transfer_from_parser.add_argument(
        "--to", required=True, help="Type: address"
    )
    safe_batch_transfer_from_parser.add_argument(
        "--ids", required=True, help="Type: uint256[]", nargs="+"
    )
    safe_batch_transfer_from_parser.add_argument(
        "--amounts", required=True, help="Type: uint256[]", nargs="+"
    )
    safe_batch_transfer_from_parser.add_argument(
        "--data", required=True, help="Type: bytes", type=bytes_argument_type
    )
    safe_batch_transfer_from_parser.set_defaults(func=handle_safe_batch_transfer_from)

    safe_transfer_from_parser = subcommands.add_parser("safe-transfer-from")
    add_default_arguments(safe_transfer_from_parser, True)
    safe_transfer_from_parser.add_argument(
        "--from-arg", required=True, help="Type: address"
    )
    safe_transfer_from_parser.add_argument("--to", required=True, help="Type: address")
    safe_transfer_from_parser.add_argument(
        "--id", required=True, help="Type: uint256", type=int
    )
    safe_transfer_from_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    safe_transfer_from_parser.add_argument(
        "--data", required=True, help="Type: bytes", type=bytes_argument_type
    )
    safe_transfer_from_parser.set_defaults(func=handle_safe_transfer_from)

    set_approval_for_all_parser = subcommands.add_parser("set-approval-for-all")
    add_default_arguments(set_approval_for_all_parser, True)
    set_approval_for_all_parser.add_argument(
        "--operator", required=True, help="Type: address"
    )
    set_approval_for_all_parser.add_argument(
        "--approved", required=True, help="Type: bool", type=boolean_argument_type
    )
    set_approval_for_all_parser.set_defaults(func=handle_set_approval_for_all)

    set_contract_uri_parser = subcommands.add_parser("set-contract-uri")
    add_default_arguments(set_contract_uri_parser, True)
    set_contract_uri_parser.add_argument(
        "--contract-uri-arg", required=True, help="Type: string", type=str
    )
    set_contract_uri_parser.set_defaults(func=handle_set_contract_uri)

    set_controller_parser = subcommands.add_parser("set-controller")
    add_default_arguments(set_controller_parser, True)
    set_controller_parser.add_argument(
        "--new-controller", required=True, help="Type: address"
    )
    set_controller_parser.set_defaults(func=handle_set_controller)

    set_payment_token_parser = subcommands.add_parser("set-payment-token")
    add_default_arguments(set_payment_token_parser, True)
    set_payment_token_parser.add_argument(
        "--new-payment-token", required=True, help="Type: address"
    )
    set_payment_token_parser.set_defaults(func=handle_set_payment_token)

    set_pool_base_price_parser = subcommands.add_parser("set-pool-base-price")
    add_default_arguments(set_pool_base_price_parser, True)
    set_pool_base_price_parser.add_argument(
        "--new-base-price", required=True, help="Type: uint256", type=int
    )
    set_pool_base_price_parser.set_defaults(func=handle_set_pool_base_price)

    set_pool_burnable_parser = subcommands.add_parser("set-pool-burnable")
    add_default_arguments(set_pool_burnable_parser, True)
    set_pool_burnable_parser.add_argument(
        "--pool-id", required=True, help="Type: uint256", type=int
    )
    set_pool_burnable_parser.add_argument(
        "--burnable", required=True, help="Type: bool", type=boolean_argument_type
    )
    set_pool_burnable_parser.set_defaults(func=handle_set_pool_burnable)

    set_pool_controller_parser = subcommands.add_parser("set-pool-controller")
    add_default_arguments(set_pool_controller_parser, True)
    set_pool_controller_parser.add_argument(
        "--pool-id", required=True, help="Type: uint256", type=int
    )
    set_pool_controller_parser.add_argument(
        "--new-controller", required=True, help="Type: address"
    )
    set_pool_controller_parser.set_defaults(func=handle_set_pool_controller)

    set_pool_transferable_parser = subcommands.add_parser("set-pool-transferable")
    add_default_arguments(set_pool_transferable_parser, True)
    set_pool_transferable_parser.add_argument(
        "--pool-id", required=True, help="Type: uint256", type=int
    )
    set_pool_transferable_parser.add_argument(
        "--transferable", required=True, help="Type: bool", type=boolean_argument_type
    )
    set_pool_transferable_parser.set_defaults(func=handle_set_pool_transferable)

    set_uri_parser = subcommands.add_parser("set-uri")
    add_default_arguments(set_uri_parser, True)
    set_uri_parser.add_argument(
        "--pool-id", required=True, help="Type: uint256", type=int
    )
    set_uri_parser.add_argument(
        "--pool-uri", required=True, help="Type: string", type=str
    )
    set_uri_parser.set_defaults(func=handle_set_uri)

    supports_interface_parser = subcommands.add_parser("supports-interface")
    add_default_arguments(supports_interface_parser, False)
    supports_interface_parser.add_argument(
        "--interface-id", required=True, help="Type: bytes4", type=bytes_argument_type
    )
    supports_interface_parser.set_defaults(func=handle_supports_interface)

    terminus_controller_parser = subcommands.add_parser("terminus-controller")
    add_default_arguments(terminus_controller_parser, False)
    terminus_controller_parser.set_defaults(func=handle_terminus_controller)

    terminus_pool_capacity_parser = subcommands.add_parser("terminus-pool-capacity")
    add_default_arguments(terminus_pool_capacity_parser, False)
    terminus_pool_capacity_parser.add_argument(
        "--pool-id", required=True, help="Type: uint256", type=int
    )
    terminus_pool_capacity_parser.set_defaults(func=handle_terminus_pool_capacity)

    terminus_pool_controller_parser = subcommands.add_parser("terminus-pool-controller")
    add_default_arguments(terminus_pool_controller_parser, False)
    terminus_pool_controller_parser.add_argument(
        "--pool-id", required=True, help="Type: uint256", type=int
    )
    terminus_pool_controller_parser.set_defaults(func=handle_terminus_pool_controller)

    terminus_pool_supply_parser = subcommands.add_parser("terminus-pool-supply")
    add_default_arguments(terminus_pool_supply_parser, False)
    terminus_pool_supply_parser.add_argument(
        "--pool-id", required=True, help="Type: uint256", type=int
    )
    terminus_pool_supply_parser.set_defaults(func=handle_terminus_pool_supply)

    total_pools_parser = subcommands.add_parser("total-pools")
    add_default_arguments(total_pools_parser, False)
    total_pools_parser.set_defaults(func=handle_total_pools)

    unapprove_for_pool_parser = subcommands.add_parser("unapprove-for-pool")
    add_default_arguments(unapprove_for_pool_parser, True)
    unapprove_for_pool_parser.add_argument(
        "--pool-id", required=True, help="Type: uint256", type=int
    )
    unapprove_for_pool_parser.add_argument(
        "--operator", required=True, help="Type: address"
    )
    unapprove_for_pool_parser.set_defaults(func=handle_unapprove_for_pool)

    uri_parser = subcommands.add_parser("uri")
    add_default_arguments(uri_parser, False)
    uri_parser.add_argument("--pool-id", required=True, help="Type: uint256", type=int)
    uri_parser.set_defaults(func=handle_uri)

    withdraw_payments_parser = subcommands.add_parser("withdraw-payments")
    add_default_arguments(withdraw_payments_parser, True)
    withdraw_payments_parser.add_argument(
        "--to-address", required=True, help="Type: address"
    )
    withdraw_payments_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    withdraw_payments_parser.set_defaults(func=handle_withdraw_payments)

    return parser


def main() -> None:
    parser = generate_cli()
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
